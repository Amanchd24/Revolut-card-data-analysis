yaxis = list(title = "Amount"))
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers",
animation_frame = ~type) %>%
layout(title = "Type Transactions with Amount by Date",+
xaxis = list(title = "Date"),+
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers",
animation_frame = ~type) %>%
layout(title = "Type Transactions with Amount by Date",
xaxis = list(title = "Date"),
yaxis = list(title = "Amount"))
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers",
animation_frame = ~type,
title = "Type Transactions with Amount by Date",
xaxis = list(title = "Date"),
yaxis = list(title = "Amount"))
install.packages("plotly")
# Load the plotly package
library(plotly)
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers",
animation_frame = ~type,
title = "Type Transactions with Amount by Date",
xaxis = list(title = "Date"),
yaxis = list(title = "Amount"))
# Export as HTML file
htmlwidgets::saveWidget(scatter, "animated_plot.html")
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers",
title = "Type Transactions with Amount by Date",
xaxis = list(title = "Date"),
yaxis = list(title = "Amount"))
# Display the plot in RStudio
scatter
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Date"),
yaxis = list(title = "Amount")) %>%
ggplotly() %>%
ggtitle("Type Transactions with Amount by Date")
# Display the plot in RStudio
scatter
# Create scatter plot
scatter <- plot_ly(fraud1, x = ~Date, y = ~amount, color = ~factor(isFraud),
colors = c("blue", "red"), type = "scatter", mode = "markers") %>%
layout(title = "Type Transactions with Amount by Date",
xaxis = list(title = "Date"),
yaxis = list(title = "Amount"))
# Display the plot in RStudio
scatter
gender_amount <- aggregate(amount ~ Gender + isFraud, data = fraud1, FUN = sum)
# Create a bar graph
ggplot(gender_amount, aes(x = Gender, y = amount, fill = factor(isFraud))) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("green", "red"), labels = c("Not Fraud", "Fraud")) +
labs(title = "Total Transaction Amount by Gender",
x = "Gender",
y = "Total Amount",
fill = "Fraudulent Transaction") +
theme_minimal() +
theme(legend.position = "bottom")
# Create a bar graph
ggplot(gender_amount, aes(x = Gender, y = amount, fill = factor(isFraud))) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("green", "red"), labels = c("Not Fraud", "Fraud")) +
labs(title = "Total Transaction Amount by Gender",
x = "Gender",
y = "Total Amount",
fill = "Fraudulent Transaction") +
theme_minimal() +
theme(legend.position = "bottom")+
scale_y_continuous(labels = scales::comma_format())
Fraud2<-fraud1
# Split 'Date' column into day, month, and year
Fraud2$Day <- day(Fraud2$Date)
Fraud2$Month <- month(Fraud2$Date)
Fraud2$Year <- year(Fraud2$Date)
# Drop the original 'Date' column
Fraud2 <- Fraud2[, !(names(Fraud2) %in% c("Date"))]
Fraud2
Fraud2$Gender <- ifelse(Fraud2$Gender == "F", 0, 1)
Fraud2
encoding1 <- c("CASH_IN" = 0, "CASH_OUT" = 1, "DEBIT" = 2, "PAYMENT" = 3,"TRANSFER" = 4)
encoding2 <- c("Classic" = 0, "Gold" = 1, "Mass" = 2, "Platinum" = 3,"Signature" = 4,"Silver" = 5)
Fraud2$type <- encoding1[Fraud2$type]
Fraud2$Card.Type <- encoding2[Fraud2$Card.Type]
Fraud2
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
names(Fraud2)[names(Fraud2) == "Exp.Type"] <- "Exp_Type"
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
# Identify categorical columns
cat_columns <- c("City", "Exp_Type")
# Create dummy variables
Fraud2 <- predict(dummyVars(~ ., data = Fraud2[cat_columns]), newdata = Fraud2)
Fraud2
Fraud2<-fraud1
Fraud2
# Split 'Date' column into day, month, and year
Fraud2$Day <- day(Fraud2$Date)
Fraud2$Month <- month(Fraud2$Date)
Fraud2$Year <- year(Fraud2$Date)
# Drop the original 'Date' column
Fraud2 <- Fraud2[, !(names(Fraud2) %in% c("Date"))]
Fraud2$Gender <- ifelse(Fraud2$Gender == "F", 0, 1)
# Define encoding dictionary
encoding1 <- c("CASH_IN" = 0, "CASH_OUT" = 1, "DEBIT" = 2, "PAYMENT" = 3,"TRANSFER" = 4)
encoding2 <- c("Classic" = 0, "Gold" = 1, "Mass" = 2, "Platinum" = 3,"Signature" = 4,"Silver" = 5)
# Manually encode 'Variable' column based on the encoding dictionary
Fraud2$type <- encoding1[Fraud2$type]
Fraud2$Card.Type <- encoding2[Fraud2$Card.Type]
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
names(Fraud2)[names(Fraud2) == "Exp.Type"] <- "Exp_Type"
Fraud2
Fraud2$City <- as.integer(as.factor(Fraud2$City))
Fraud2$Exp_Type <- as.integer(as.factor(Fraud2$Exp_Type))
Fraud2
drop(Fraud2$nameOrig)
Fraud2
Fraud2
drop(Fraud2$nameOrig)
Fraud2
glimpse(Fraud2)
Fraud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
library(pROC)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$isFraud, p = 0.7, list = FALSE)
train_data <- Fraud2[train_indices, ]
test_data <- Fraud2[-train_indices, ]
# Define the ranges for hyperparameters
max_depth_range <- c(5, 10, 15, 20)
min_samples_split_range <- c(5, 10, 15)
n_estimators_range <- c(50, 100, 150)
tune_grid <- expand.grid(
mtry = c(2, 4, 6),  # Example values for mtry
max_depth = max_depth_range,     # Range of max depth values
min_samples_split = min_samples_split_range,  # Range of min samples to split
n_estimators = n_estimators_range   # Range of number of trees
)
# Train the Random Forest model with specified hyperparameters and ranges
model <- train(
isFraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
# Train the model
model <- train(
target_column ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
# Train the model
model <- train(
isFraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
# Define training control
ctrl <- trainControl(method = "cv", number = 5, summaryFunction = twoClassSummary, classProbs = TRUE)
# Check data type of isFraud column
class(train_data$isFraud)
# Check levels of isFraud column
levels(train_data$isFraud)
train_data$isFraud <- factor(train_data$isFraud, levels = c(0, 1))
test_data$isFraud <- factor(test_data$isFraud, levels = c(0, 1))
# Check data type of isFraud column
class(train_data$isFraud)
# Check levels of isFraud column
levels(train_data$isFraud)
# Train the model
model <- train(
isFraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
?make.names
glimpse(train_data)
colnames(train_data) <- make.names(colnames(train_data))
colnames(test_data) <- make.names(colnames(test_data))
glimpse(train_data)
# Train the model
model <- train(
isFraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
glimpse(train_data)
levels(train_data$isFraud) <- c("0", "1")
# Check levels of isFraud column
levels(train_data$isFraud)
# Train the model
model <- train(
isFraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
names(Fraud2)[names(Fraud2) == "isFraud"] <- "Fraud"
Fraud2$City <- as.integer(as.factor(Fraud2$City))
Fraud2$Exp_Type <- as.integer(as.factor(Fraud2$Exp_Type))
Fraud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
Fraud2<-fraud1
# Split 'Date' column into day, month, and year
Fraud2$Day <- day(Fraud2$Date)
Fraud2$Month <- month(Fraud2$Date)
Fraud2$Year <- year(Fraud2$Date)
# Drop the original 'Date' column
Fraud2 <- Fraud2[, !(names(Fraud2) %in% c("Date"))]
Fraud2$Gender <- ifelse(Fraud2$Gender == "F", 0, 1)
# Define encoding dictionary
encoding1 <- c("CASH_IN" = 0, "CASH_OUT" = 1, "DEBIT" = 2, "PAYMENT" = 3,"TRANSFER" = 4)
encoding2 <- c("Classic" = 0, "Gold" = 1, "Mass" = 2, "Platinum" = 3,"Signature" = 4,"Silver" = 5)
# Manually encode 'Variable' column based on the encoding dictionary
Fraud2$type <- encoding1[Fraud2$type]
Fraud2$Card.Type <- encoding2[Fraud2$Card.Type]
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
names(Fraud2)[names(Fraud2) == "Exp.Type"] <- "Exp_Type"
names(Fraud2)[names(Fraud2) == "isFraud"] <- "Fraud"
Fraud2$City <- as.integer(as.factor(Fraud2$City))
Fraud2$Exp_Type <- as.integer(as.factor(Fraud2$Exp_Type))
Fraud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$Fraud, p = 0.7, list = FALSE)
train_data <- Fraud2[train_indices, ]
test_data <- Fraud2[-train_indices, ]
# Define the ranges for hyperparameters
max_depth_range <- c(5, 10, 15, 20)
min_samples_split_range <- c(5, 10, 15)
n_estimators_range <- c(50, 100, 150)
ctrl <- trainControl(method = "cv", number = 5, summaryFunction = twoClassSummary, classProbs = TRUE)
tune_grid <- expand.grid(
mtry = c(2, 4, 6),  # Example values for mtry
max_depth = max_depth_range,     # Range of max depth values
min_samples_split = min_samples_split_range,  # Range of min samples to split
n_estimators = n_estimators_range   # Range of number of trees
)
train_data$isFraud <- factor(train_data$Fraud, levels = c(0, 1))
test_data$isFraud <- factor(test_data$Fraud, levels = c(0, 1))
# Check data type of Fraud column
class(train_data$Fraud)
class(test_data$Fraud)
train_data$Fraud <- factor(train_data$Fraud, levels = c(0, 1))
test_data$Fraud <- factor(test_data$Fraud, levels = c(0, 1))
Check data type of Fraud column
# Check data type of Fraud column
class(train_data$Fraud)
class(test_data$Fraud)
# Check levels of Fraud column
levels(train_data$Fraud)
glimpse(train_data)
glimpse(Fraud2)
library(caret)
library(pROC)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$Fraud, p = 0.7, list = FALSE)
train_data <- Fraud2[train_indices, ]
test_data <- Fraud2[-train_indices, ]
train_data
# Train the model
model <- train(
Fraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
glimpse(train_data)
colnames(train_data) <- make.names(colnames(train_data))
colnames(test_data) <- make.names(colnames(test_data))
# Check levels of Fraud column
levels(train_data$Fraud)
train_data$Fraud <- factor(train_data$Fraud, levels = c(0, 1))
test_data$Fraud <- factor(test_data$Fraud, levels = c(0, 1))
# Check levels of Fraud column
levels(train_data$Fraud)
# Train the model
model <- train(
Fraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
glimpse(train_data)
levels(Fraud) <- make.names(levels(Fraud))
##############################################
#Classification modeling
fraud1
Fraud2<-fraud1
Fraud2$Day <- day(Fraud2$Date)
Fraud2$Month <- month(Fraud2$Date)
Fraud2$Year <- year(Fraud2$Date)
# Drop the original 'Date' column
Fraud2 <- Fraud2[, !(names(Fraud2) %in% c("Date"))]
Fraud2$Gender <- ifelse(Fraud2$Gender == "F", 0, 1)
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
names(Fraud2)[names(Fraud2) == "Exp.Type"] <- "Exp_Type"
names(Fraud2)[names(Fraud2) == "isFraud"] <- "Fraudop"
# Define encoding dictionary
encoding1 <- c("CASH_IN" = 0, "CASH_OUT" = 1, "DEBIT" = 2, "PAYMENT" = 3,"TRANSFER" = 4)
encoding2 <- c("Classic" = 0, "Gold" = 1, "Mass" = 2, "Platinum" = 3,"Signature" = 4,"Silver" = 5)
# Manually encode 'Variable' column based on the encoding dictionary
Fraud2$type <- encoding1[Fraud2$type]
Fraud2$Card.Type <- encoding2[Fraud2$Card_Type]
Fraud2$City <- as.integer(as.factor(Fraud2$City))
Fraud2$Exp_Type <- as.integer(as.factor(Fraud2$Exp_Type))
raud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
Fraud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
levels(Fraud2$Fraudop) <- c("0", "1")
limpse(Fraud2)
glimpse(Fraud2)
levels(Fraud2$Fraudop) <- c("0", "1")
glimpse(Fraud2)
class(Fraud2$Fraudop)
colnames(Fraud2) <- make.names(colnames(Fraud2))
glimpse(Fraud2)
Fraud2$Fraudop <- factor(Fraud2$Fraudop, levels = c(0, 1))
class(Fraud2$Fraudop)
Fraud2$Gender <- factor(Fraud2$Gender, levels = c(0, 1))
class(Fraud2$Gender)
glimpse(Fraud2)
Fraud2$Card_Type <- encoding2[Fraud2$Card_Type]
glimpse(Fraud2)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$Fraudop, p = 0.7, list = FALSE)
train_data <- Fraud2[train_indices, ]
test_data <- Fraud2[-train_indices, ]
# Define the ranges for hyperparameters
max_depth_range <- c(5, 10, 15, 20)
min_samples_split_range <- c(5, 10, 15)
n_estimators_range <- c(50, 100, 150)
# Define training control
ctrl <- trainControl(method = "cv", number = 5, summaryFunction = twoClassSummary, classProbs = TRUE)
tune_grid <- expand.grid(
mtry = c(2, 4, 6),  # Example values for mtry
max_depth = max_depth_range,     # Range of max depth values
min_samples_split = min_samples_split_range,  # Range of min samples to split
n_estimators = n_estimators_range   # Range of number of trees
)
glimpse(train_data)
glimpse(Fraud2)
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
glimpse(Fraud2)
Fraud2<-fraud1
#First we do encoding of data and delete un-necessary data
# Split 'Date' column into day, month, and year
Fraud2$Day <- day(Fraud2$Date)
Fraud2$Month <- month(Fraud2$Date)
Fraud2$Year <- year(Fraud2$Date)
# Drop the original 'Date' column
Fraud2 <- Fraud2[, !(names(Fraud2) %in% c("Date"))]
Fraud2$Gender <- ifelse(Fraud2$Gender == "F", 0, 1)
names(Fraud2)[names(Fraud2) == "Card.Type"] <- "Card_Type"
names(Fraud2)[names(Fraud2) == "Exp.Type"] <- "Exp_Type"
names(Fraud2)[names(Fraud2) == "isFraud"] <- "Fraudop"
glimpse(Fraud2)
# Define encoding dictionary
encoding1 <- c("CASH_IN" = 0, "CASH_OUT" = 1, "DEBIT" = 2, "PAYMENT" = 3,"TRANSFER" = 4)
encoding2 <- c("Classic" = 0, "Gold" = 1, "Mass" = 2, "Platinum" = 3,"Signature" = 4,"Silver" = 5)
# Manually encode 'Variable' column based on the encoding dictionary
Fraud2$type <- encoding1[Fraud2$type]
Fraud2$Card_Type <- encoding2[Fraud2$Card_Type]
glimpse(Fraud2)
Fraud2$City <- as.integer(as.factor(Fraud2$City))
Fraud2$Exp_Type <- as.integer(as.factor(Fraud2$Exp_Type))
Fraud2 <- Fraud2[, -which(names(Fraud2) == "nameOrig")]
glimpse(Fraud2)
colnames(Fraud2) <- make.names(colnames(Fraud2))
Fraud2$Fraudop <- factor(Fraud2$Fraudop, levels = c(0, 1))
Fraud2$Gender <- factor(Fraud2$Gender, levels = c(0, 1))
class(Fraud2$Fraudop)
class(Fraud2$Gender)
glimpse(Fraud2)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$Fraudop, p = 0.7, list = FALSE)
train_data <- Fraud2[train_indices, ]
test_data <- Fraud2[-train_indices, ]
glimpse(train_data)
glimpse(test_data)
# Define the ranges for hyperparameters
max_depth_range <- c(5, 10, 15, 20)
min_samples_split_range <- c(5, 10, 15)
n_estimators_range <- c(50, 100, 150)
# Define training control
ctrl <- trainControl(method = "cv", number = 5, summaryFunction = twoClassSummary, classProbs = TRUE)
tune_grid <- expand.grid(
mtry = c(2, 4, 6),  # Example values for mtry
max_depth = max_depth_range,     # Range of max depth values
min_samples_split = min_samples_split_range,  # Range of min samples to split
n_estimators = n_estimators_range   # Range of number of trees
)
glimpse(Fraud2)
glimpse(train_data)
# Train the model
model <- train(
Fraud ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
# Train the model
model <- train(
Fraudop ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
glimpse(train_data)
levels(train_data$Fraudop) <- c("NotFraud", "Fraud")
# Train the model
model <- train(
Fraudop ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
tune_grid <- expand.grid(
.mtry = c(2, 4, 6),  # Example values for mtry
max_depth = max_depth_range,     # Range of max depth values
min_samples_split = min_samples_split_range,  # Range of min samples to split
n_estimators = n_estimators_range   # Range of number of trees
)
# Train the model
model <- train(
Fraudop ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
tune_grid <- expand.grid(
.mtry = c(2, 4, 6),  # Example values for mtry (note the dot)
max_depth = max_depth_range,
min_samples_split = min_samples_split_range,
n_estimators = n_estimators_range
)
# Train the model
model <- train(
Fraudop ~ .,
data = train_data,
method = "rf",
trControl = ctrl,
tuneGrid = tune_grid
)
?train
?train
?train
modelLookup(rf)
modelLookup()
# Define model with hyperparameters
model <- train(target_column ~ ., data = train_data, method = "rf",
trControl = ctrl, tuneGrid = expand.grid(mtry = c(2, 4, 6)))
# Define model with hyperparameters
model <- train(Fraudop ~ ., data = train_data, method = "rf",
trControl = ctrl, tuneGrid = expand.grid(mtry = c(2, 4, 6)))
glimpse(train_data)
library(caret)
library(pROC)
set.seed(123)  # for reproducibility
train_indices <- createDataPartition(Fraud2$Fraudop, p = 0.7, list = FALSE)
################################################
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
load("C:/Users/manch/assignment3/.RData")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
options(repos = c(CRANmirror = "https://cran.r-project.org/"))
suppressMessages(install.packages("readr"))
suppressMessages(install.packages("tidyverse"))
suppressMessages(install.packages("Hmisc"))
install.packages("reshape2")
install.packages("lattice")
install.packages("reshape2")
install.packages("lattice")
install.packages("ggplot2")
install.packages("caret")
